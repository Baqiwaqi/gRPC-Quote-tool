// source: quote.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.quote.tool.QuoteService', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.Cargo', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.Cargo.Dimensions', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.Cargo.Specification', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.Customer', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.Customer.Contact', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.NoParams', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.Quote', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.QuoteDeleteResponse', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.QuoteIdResponse', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.QuoteRequest', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.QuoteResponse', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.QuoteStreamResponse', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.QuoteStreamResponse.ChangeType', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.QuotesListResponse', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.Rates', null, global);
goog.exportSymbol('proto.quote.tool.QuoteService.Rates.Rate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.displayName = 'proto.quote.tool.QuoteService';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.Quote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quote.tool.QuoteService.Quote.repeatedFields_, null);
};
goog.inherits(proto.quote.tool.QuoteService.Quote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.Quote.displayName = 'proto.quote.tool.QuoteService.Quote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.Customer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.Customer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.Customer.displayName = 'proto.quote.tool.QuoteService.Customer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.Customer.Contact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.Customer.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.Customer.Contact.displayName = 'proto.quote.tool.QuoteService.Customer.Contact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.Cargo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quote.tool.QuoteService.Cargo.repeatedFields_, null);
};
goog.inherits(proto.quote.tool.QuoteService.Cargo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.Cargo.displayName = 'proto.quote.tool.QuoteService.Cargo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.Cargo.Specification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.Cargo.Specification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.Cargo.Specification.displayName = 'proto.quote.tool.QuoteService.Cargo.Specification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.Cargo.Dimensions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.Cargo.Dimensions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.Cargo.Dimensions.displayName = 'proto.quote.tool.QuoteService.Cargo.Dimensions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.Rates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.Rates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.Rates.displayName = 'proto.quote.tool.QuoteService.Rates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.Rates.Rate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.Rates.Rate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.Rates.Rate.displayName = 'proto.quote.tool.QuoteService.Rates.Rate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.NoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.NoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.NoParams.displayName = 'proto.quote.tool.QuoteService.NoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.QuoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.QuoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.QuoteRequest.displayName = 'proto.quote.tool.QuoteService.QuoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.QuoteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.QuoteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.QuoteResponse.displayName = 'proto.quote.tool.QuoteService.QuoteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.QuoteIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.QuoteIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.QuoteIdResponse.displayName = 'proto.quote.tool.QuoteService.QuoteIdResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.QuoteDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.QuoteDeleteResponse.displayName = 'proto.quote.tool.QuoteService.QuoteDeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.QuotesListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quote.tool.QuoteService.QuotesListResponse.repeatedFields_, null);
};
goog.inherits(proto.quote.tool.QuoteService.QuotesListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.QuotesListResponse.displayName = 'proto.quote.tool.QuoteService.QuotesListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quote.tool.QuoteService.QuoteStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quote.tool.QuoteService.QuoteStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quote.tool.QuoteService.QuoteStreamResponse.displayName = 'proto.quote.tool.QuoteService.QuoteStreamResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService}
 */
proto.quote.tool.QuoteService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService;
  return proto.quote.tool.QuoteService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService}
 */
proto.quote.tool.QuoteService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quote.tool.QuoteService.Quote.repeatedFields_ = [5,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.Quote.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.Quote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.Quote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Quote.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    carrier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customer: (f = msg.getCustomer()) && proto.quote.tool.QuoteService.Customer.toObject(includeInstance, f),
    customerRef: jspb.Message.getFieldWithDefault(msg, 4, ""),
    customerContactsList: jspb.Message.toObjectList(msg.getCustomerContactsList(),
    proto.quote.tool.QuoteService.Customer.Contact.toObject, includeInstance),
    availableDate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    product: jspb.Message.getFieldWithDefault(msg, 7, ""),
    collectFrom: jspb.Message.getFieldWithDefault(msg, 8, ""),
    origin: jspb.Message.getFieldWithDefault(msg, 9, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 10, ""),
    cargoType: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isDangerous: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    canBeTurned: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    isKnown: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    aircraftOnly: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    description: jspb.Message.getFieldWithDefault(msg, 16, ""),
    sizeMetric: jspb.Message.getFieldWithDefault(msg, 17, ""),
    weightMetric: jspb.Message.getFieldWithDefault(msg, 18, ""),
    cargoList: jspb.Message.toObjectList(msg.getCargoList(),
    proto.quote.tool.QuoteService.Cargo.toObject, includeInstance),
    rate: (f = msg.getRate()) && proto.quote.tool.QuoteService.Rates.Rate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.Quote}
 */
proto.quote.tool.QuoteService.Quote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.Quote;
  return proto.quote.tool.QuoteService.Quote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.Quote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.Quote}
 */
proto.quote.tool.QuoteService.Quote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarrier(value);
      break;
    case 3:
      var value = new proto.quote.tool.QuoteService.Customer;
      reader.readMessage(value,proto.quote.tool.QuoteService.Customer.deserializeBinaryFromReader);
      msg.setCustomer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerRef(value);
      break;
    case 5:
      var value = new proto.quote.tool.QuoteService.Customer.Contact;
      reader.readMessage(value,proto.quote.tool.QuoteService.Customer.Contact.deserializeBinaryFromReader);
      msg.addCustomerContacts(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableDate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProduct(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectFrom(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrigin(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCargoType(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDangerous(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanBeTurned(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsKnown(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAircraftOnly(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setSizeMetric(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightMetric(value);
      break;
    case 19:
      var value = new proto.quote.tool.QuoteService.Cargo;
      reader.readMessage(value,proto.quote.tool.QuoteService.Cargo.deserializeBinaryFromReader);
      msg.addCargo(value);
      break;
    case 20:
      var value = new proto.quote.tool.QuoteService.Rates.Rate;
      reader.readMessage(value,proto.quote.tool.QuoteService.Rates.Rate.deserializeBinaryFromReader);
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.Quote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.Quote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.Quote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Quote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCarrier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.quote.tool.QuoteService.Customer.serializeBinaryToWriter
    );
  }
  f = message.getCustomerRef();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCustomerContactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.quote.tool.QuoteService.Customer.Contact.serializeBinaryToWriter
    );
  }
  f = message.getAvailableDate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProduct();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCollectFrom();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOrigin();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCargoType();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsDangerous();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getCanBeTurned();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIsKnown();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getAircraftOnly();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getSizeMetric();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getWeightMetric();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getCargoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.quote.tool.QuoteService.Cargo.serializeBinaryToWriter
    );
  }
  f = message.getRate();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.quote.tool.QuoteService.Rates.Rate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string carrier = 2;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getCarrier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setCarrier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Customer customer = 3;
 * @return {?proto.quote.tool.QuoteService.Customer}
 */
proto.quote.tool.QuoteService.Quote.prototype.getCustomer = function() {
  return /** @type{?proto.quote.tool.QuoteService.Customer} */ (
    jspb.Message.getWrapperField(this, proto.quote.tool.QuoteService.Customer, 3));
};


/**
 * @param {?proto.quote.tool.QuoteService.Customer|undefined} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
*/
proto.quote.tool.QuoteService.Quote.prototype.setCustomer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.clearCustomer = function() {
  return this.setCustomer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quote.tool.QuoteService.Quote.prototype.hasCustomer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string customer_ref = 4;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getCustomerRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setCustomerRef = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Customer.Contact customer_contacts = 5;
 * @return {!Array<!proto.quote.tool.QuoteService.Customer.Contact>}
 */
proto.quote.tool.QuoteService.Quote.prototype.getCustomerContactsList = function() {
  return /** @type{!Array<!proto.quote.tool.QuoteService.Customer.Contact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quote.tool.QuoteService.Customer.Contact, 5));
};


/**
 * @param {!Array<!proto.quote.tool.QuoteService.Customer.Contact>} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
*/
proto.quote.tool.QuoteService.Quote.prototype.setCustomerContactsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.quote.tool.QuoteService.Customer.Contact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quote.tool.QuoteService.Customer.Contact}
 */
proto.quote.tool.QuoteService.Quote.prototype.addCustomerContacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.quote.tool.QuoteService.Customer.Contact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.clearCustomerContactsList = function() {
  return this.setCustomerContactsList([]);
};


/**
 * optional string available_date = 6;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getAvailableDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setAvailableDate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string product = 7;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getProduct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setProduct = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string collect_from = 8;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getCollectFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setCollectFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string origin = 9;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setOrigin = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string destination = 10;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setDestination = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string cargo_type = 11;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getCargoType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setCargoType = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool is_dangerous = 12;
 * @return {boolean}
 */
proto.quote.tool.QuoteService.Quote.prototype.getIsDangerous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setIsDangerous = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool can_be_turned = 13;
 * @return {boolean}
 */
proto.quote.tool.QuoteService.Quote.prototype.getCanBeTurned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setCanBeTurned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool is_known = 14;
 * @return {boolean}
 */
proto.quote.tool.QuoteService.Quote.prototype.getIsKnown = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setIsKnown = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool aircraft_only = 15;
 * @return {boolean}
 */
proto.quote.tool.QuoteService.Quote.prototype.getAircraftOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setAircraftOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string description = 16;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string size_metric = 17;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getSizeMetric = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setSizeMetric = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string weight_metric = 18;
 * @return {string}
 */
proto.quote.tool.QuoteService.Quote.prototype.getWeightMetric = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.setWeightMetric = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * repeated Cargo cargo = 19;
 * @return {!Array<!proto.quote.tool.QuoteService.Cargo>}
 */
proto.quote.tool.QuoteService.Quote.prototype.getCargoList = function() {
  return /** @type{!Array<!proto.quote.tool.QuoteService.Cargo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quote.tool.QuoteService.Cargo, 19));
};


/**
 * @param {!Array<!proto.quote.tool.QuoteService.Cargo>} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
*/
proto.quote.tool.QuoteService.Quote.prototype.setCargoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.quote.tool.QuoteService.Cargo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quote.tool.QuoteService.Cargo}
 */
proto.quote.tool.QuoteService.Quote.prototype.addCargo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.quote.tool.QuoteService.Cargo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.clearCargoList = function() {
  return this.setCargoList([]);
};


/**
 * optional Rates.Rate rate = 20;
 * @return {?proto.quote.tool.QuoteService.Rates.Rate}
 */
proto.quote.tool.QuoteService.Quote.prototype.getRate = function() {
  return /** @type{?proto.quote.tool.QuoteService.Rates.Rate} */ (
    jspb.Message.getWrapperField(this, proto.quote.tool.QuoteService.Rates.Rate, 20));
};


/**
 * @param {?proto.quote.tool.QuoteService.Rates.Rate|undefined} value
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
*/
proto.quote.tool.QuoteService.Quote.prototype.setRate = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quote.tool.QuoteService.Quote} returns this
 */
proto.quote.tool.QuoteService.Quote.prototype.clearRate = function() {
  return this.setRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quote.tool.QuoteService.Quote.prototype.hasRate = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.Customer.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.Customer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.Customer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Customer.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.Customer}
 */
proto.quote.tool.QuoteService.Customer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.Customer;
  return proto.quote.tool.QuoteService.Customer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.Customer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.Customer}
 */
proto.quote.tool.QuoteService.Customer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.Customer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.Customer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.Customer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Customer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.Customer.Contact.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.Customer.Contact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.Customer.Contact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Customer.Contact.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.Customer.Contact}
 */
proto.quote.tool.QuoteService.Customer.Contact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.Customer.Contact;
  return proto.quote.tool.QuoteService.Customer.Contact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.Customer.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.Customer.Contact}
 */
proto.quote.tool.QuoteService.Customer.Contact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.Customer.Contact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.Customer.Contact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.Customer.Contact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Customer.Contact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.quote.tool.QuoteService.Customer.Contact.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Customer.Contact} returns this
 */
proto.quote.tool.QuoteService.Customer.Contact.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string phone = 3;
 * @return {string}
 */
proto.quote.tool.QuoteService.Customer.Contact.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Customer.Contact} returns this
 */
proto.quote.tool.QuoteService.Customer.Contact.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.quote.tool.QuoteService.Customer.Contact.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Customer.Contact} returns this
 */
proto.quote.tool.QuoteService.Customer.Contact.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.quote.tool.QuoteService.Customer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Customer} returns this
 */
proto.quote.tool.QuoteService.Customer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quote.tool.QuoteService.Cargo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.Cargo.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.Cargo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.Cargo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Cargo.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalPieces: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalWeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalVolume: jspb.Message.getFieldWithDefault(msg, 3, 0),
    specificationsList: jspb.Message.toObjectList(msg.getSpecificationsList(),
    proto.quote.tool.QuoteService.Cargo.Specification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.Cargo}
 */
proto.quote.tool.QuoteService.Cargo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.Cargo;
  return proto.quote.tool.QuoteService.Cargo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.Cargo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.Cargo}
 */
proto.quote.tool.QuoteService.Cargo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalPieces(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalWeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalVolume(value);
      break;
    case 4:
      var value = new proto.quote.tool.QuoteService.Cargo.Specification;
      reader.readMessage(value,proto.quote.tool.QuoteService.Cargo.Specification.deserializeBinaryFromReader);
      msg.addSpecifications(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.Cargo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.Cargo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.Cargo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Cargo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalPieces();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTotalWeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTotalVolume();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSpecificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.quote.tool.QuoteService.Cargo.Specification.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.Cargo.Specification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.Cargo.Specification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Cargo.Specification.toObject = function(includeInstance, msg) {
  var f, obj = {
    pieces: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dimensions: (f = msg.getDimensions()) && proto.quote.tool.QuoteService.Cargo.Dimensions.toObject(includeInstance, f),
    grossWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.Cargo.Specification}
 */
proto.quote.tool.QuoteService.Cargo.Specification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.Cargo.Specification;
  return proto.quote.tool.QuoteService.Cargo.Specification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.Cargo.Specification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.Cargo.Specification}
 */
proto.quote.tool.QuoteService.Cargo.Specification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPieces(value);
      break;
    case 4:
      var value = new proto.quote.tool.QuoteService.Cargo.Dimensions;
      reader.readMessage(value,proto.quote.tool.QuoteService.Cargo.Dimensions.deserializeBinaryFromReader);
      msg.setDimensions(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGrossWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.Cargo.Specification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.Cargo.Specification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Cargo.Specification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPieces();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDimensions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.quote.tool.QuoteService.Cargo.Dimensions.serializeBinaryToWriter
    );
  }
  f = message.getGrossWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional int32 pieces = 1;
 * @return {number}
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.getPieces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Cargo.Specification} returns this
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.setPieces = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Dimensions Dimensions = 4;
 * @return {?proto.quote.tool.QuoteService.Cargo.Dimensions}
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.getDimensions = function() {
  return /** @type{?proto.quote.tool.QuoteService.Cargo.Dimensions} */ (
    jspb.Message.getWrapperField(this, proto.quote.tool.QuoteService.Cargo.Dimensions, 4));
};


/**
 * @param {?proto.quote.tool.QuoteService.Cargo.Dimensions|undefined} value
 * @return {!proto.quote.tool.QuoteService.Cargo.Specification} returns this
*/
proto.quote.tool.QuoteService.Cargo.Specification.prototype.setDimensions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quote.tool.QuoteService.Cargo.Specification} returns this
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.clearDimensions = function() {
  return this.setDimensions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.hasDimensions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float gross_weight = 5;
 * @return {number}
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.getGrossWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Cargo.Specification} returns this
 */
proto.quote.tool.QuoteService.Cargo.Specification.prototype.setGrossWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.Cargo.Dimensions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.Cargo.Dimensions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.Cargo.Dimensions}
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.Cargo.Dimensions;
  return proto.quote.tool.QuoteService.Cargo.Dimensions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.Cargo.Dimensions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.Cargo.Dimensions}
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.Cargo.Dimensions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.Cargo.Dimensions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 length = 1;
 * @return {number}
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Cargo.Dimensions} returns this
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Cargo.Dimensions} returns this
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 height = 3;
 * @return {number}
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Cargo.Dimensions} returns this
 */
proto.quote.tool.QuoteService.Cargo.Dimensions.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 total_pieces = 1;
 * @return {number}
 */
proto.quote.tool.QuoteService.Cargo.prototype.getTotalPieces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Cargo} returns this
 */
proto.quote.tool.QuoteService.Cargo.prototype.setTotalPieces = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 total_weight = 2;
 * @return {number}
 */
proto.quote.tool.QuoteService.Cargo.prototype.getTotalWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Cargo} returns this
 */
proto.quote.tool.QuoteService.Cargo.prototype.setTotalWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 total_volume = 3;
 * @return {number}
 */
proto.quote.tool.QuoteService.Cargo.prototype.getTotalVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Cargo} returns this
 */
proto.quote.tool.QuoteService.Cargo.prototype.setTotalVolume = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Specification specifications = 4;
 * @return {!Array<!proto.quote.tool.QuoteService.Cargo.Specification>}
 */
proto.quote.tool.QuoteService.Cargo.prototype.getSpecificationsList = function() {
  return /** @type{!Array<!proto.quote.tool.QuoteService.Cargo.Specification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quote.tool.QuoteService.Cargo.Specification, 4));
};


/**
 * @param {!Array<!proto.quote.tool.QuoteService.Cargo.Specification>} value
 * @return {!proto.quote.tool.QuoteService.Cargo} returns this
*/
proto.quote.tool.QuoteService.Cargo.prototype.setSpecificationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.quote.tool.QuoteService.Cargo.Specification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quote.tool.QuoteService.Cargo.Specification}
 */
proto.quote.tool.QuoteService.Cargo.prototype.addSpecifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.quote.tool.QuoteService.Cargo.Specification, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quote.tool.QuoteService.Cargo} returns this
 */
proto.quote.tool.QuoteService.Cargo.prototype.clearSpecificationsList = function() {
  return this.setSpecificationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.Rates.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.Rates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.Rates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Rates.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.Rates}
 */
proto.quote.tool.QuoteService.Rates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.Rates;
  return proto.quote.tool.QuoteService.Rates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.Rates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.Rates}
 */
proto.quote.tool.QuoteService.Rates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.Rates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.Rates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.Rates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Rates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.Rates.Rate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.Rates.Rate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Rates.Rate.toObject = function(includeInstance, msg) {
  var f, obj = {
    on: jspb.Message.getFieldWithDefault(msg, 1, ""),
    costMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    costRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    salesMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    salesRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.Rates.Rate}
 */
proto.quote.tool.QuoteService.Rates.Rate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.Rates.Rate;
  return proto.quote.tool.QuoteService.Rates.Rate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.Rates.Rate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.Rates.Rate}
 */
proto.quote.tool.QuoteService.Rates.Rate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCostMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCostRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSalesMin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSalesRate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.Rates.Rate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.Rates.Rate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.Rates.Rate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCostMin();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getCostRate();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSalesMin();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getSalesRate();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string on = 1;
 * @return {string}
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.getOn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Rates.Rate} returns this
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.setOn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float cost_min = 2;
 * @return {number}
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.getCostMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Rates.Rate} returns this
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.setCostMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float cost_rate = 3;
 * @return {number}
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.getCostRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Rates.Rate} returns this
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.setCostRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float sales_min = 4;
 * @return {number}
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.getSalesMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Rates.Rate} returns this
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.setSalesMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float sales_rate = 5;
 * @return {number}
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.getSalesRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quote.tool.QuoteService.Rates.Rate} returns this
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.setSalesRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.Rates.Rate} returns this
 */
proto.quote.tool.QuoteService.Rates.Rate.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.NoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.NoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.NoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.NoParams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.NoParams}
 */
proto.quote.tool.QuoteService.NoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.NoParams;
  return proto.quote.tool.QuoteService.NoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.NoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.NoParams}
 */
proto.quote.tool.QuoteService.NoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.NoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.NoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.NoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.NoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.QuoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.QuoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.QuoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.QuoteRequest}
 */
proto.quote.tool.QuoteService.QuoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.QuoteRequest;
  return proto.quote.tool.QuoteService.QuoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.QuoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.QuoteRequest}
 */
proto.quote.tool.QuoteService.QuoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.QuoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.QuoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.QuoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.quote.tool.QuoteService.QuoteRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.QuoteRequest} returns this
 */
proto.quote.tool.QuoteService.QuoteRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.QuoteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.QuoteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.QuoteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quote: (f = msg.getQuote()) && proto.quote.tool.QuoteService.Quote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.QuoteResponse}
 */
proto.quote.tool.QuoteService.QuoteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.QuoteResponse;
  return proto.quote.tool.QuoteService.QuoteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.QuoteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.QuoteResponse}
 */
proto.quote.tool.QuoteService.QuoteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quote.tool.QuoteService.Quote;
      reader.readMessage(value,proto.quote.tool.QuoteService.Quote.deserializeBinaryFromReader);
      msg.setQuote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.QuoteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.QuoteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.QuoteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quote.tool.QuoteService.Quote.serializeBinaryToWriter
    );
  }
};


/**
 * optional Quote quote = 1;
 * @return {?proto.quote.tool.QuoteService.Quote}
 */
proto.quote.tool.QuoteService.QuoteResponse.prototype.getQuote = function() {
  return /** @type{?proto.quote.tool.QuoteService.Quote} */ (
    jspb.Message.getWrapperField(this, proto.quote.tool.QuoteService.Quote, 1));
};


/**
 * @param {?proto.quote.tool.QuoteService.Quote|undefined} value
 * @return {!proto.quote.tool.QuoteService.QuoteResponse} returns this
*/
proto.quote.tool.QuoteService.QuoteResponse.prototype.setQuote = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quote.tool.QuoteService.QuoteResponse} returns this
 */
proto.quote.tool.QuoteService.QuoteResponse.prototype.clearQuote = function() {
  return this.setQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quote.tool.QuoteService.QuoteResponse.prototype.hasQuote = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.QuoteIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.QuoteIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.QuoteIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.QuoteIdResponse}
 */
proto.quote.tool.QuoteService.QuoteIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.QuoteIdResponse;
  return proto.quote.tool.QuoteService.QuoteIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.QuoteIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.QuoteIdResponse}
 */
proto.quote.tool.QuoteService.QuoteIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.QuoteIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.QuoteIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.QuoteIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.quote.tool.QuoteService.QuoteIdResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.QuoteIdResponse} returns this
 */
proto.quote.tool.QuoteService.QuoteIdResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.QuoteDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.QuoteDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    respsone: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.QuoteDeleteResponse}
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.QuoteDeleteResponse;
  return proto.quote.tool.QuoteService.QuoteDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.QuoteDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.QuoteDeleteResponse}
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRespsone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.QuoteDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.QuoteDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRespsone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string respsone = 1;
 * @return {string}
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse.prototype.getRespsone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quote.tool.QuoteService.QuoteDeleteResponse} returns this
 */
proto.quote.tool.QuoteService.QuoteDeleteResponse.prototype.setRespsone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quote.tool.QuoteService.QuotesListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.QuotesListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.QuotesListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.QuotesListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuotesListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quotesList: jspb.Message.toObjectList(msg.getQuotesList(),
    proto.quote.tool.QuoteService.Quote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.QuotesListResponse}
 */
proto.quote.tool.QuoteService.QuotesListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.QuotesListResponse;
  return proto.quote.tool.QuoteService.QuotesListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.QuotesListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.QuotesListResponse}
 */
proto.quote.tool.QuoteService.QuotesListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quote.tool.QuoteService.Quote;
      reader.readMessage(value,proto.quote.tool.QuoteService.Quote.deserializeBinaryFromReader);
      msg.addQuotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.QuotesListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.QuotesListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.QuotesListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuotesListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.quote.tool.QuoteService.Quote.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Quote quotes = 1;
 * @return {!Array<!proto.quote.tool.QuoteService.Quote>}
 */
proto.quote.tool.QuoteService.QuotesListResponse.prototype.getQuotesList = function() {
  return /** @type{!Array<!proto.quote.tool.QuoteService.Quote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quote.tool.QuoteService.Quote, 1));
};


/**
 * @param {!Array<!proto.quote.tool.QuoteService.Quote>} value
 * @return {!proto.quote.tool.QuoteService.QuotesListResponse} returns this
*/
proto.quote.tool.QuoteService.QuotesListResponse.prototype.setQuotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.quote.tool.QuoteService.Quote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quote.tool.QuoteService.Quote}
 */
proto.quote.tool.QuoteService.QuotesListResponse.prototype.addQuotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.quote.tool.QuoteService.Quote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quote.tool.QuoteService.QuotesListResponse} returns this
 */
proto.quote.tool.QuoteService.QuotesListResponse.prototype.clearQuotesList = function() {
  return this.setQuotesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quote.tool.QuoteService.QuoteStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quote.tool.QuoteService.QuoteStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quote: (f = msg.getQuote()) && proto.quote.tool.QuoteService.Quote.toObject(includeInstance, f),
    changetype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quote.tool.QuoteService.QuoteStreamResponse}
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quote.tool.QuoteService.QuoteStreamResponse;
  return proto.quote.tool.QuoteService.QuoteStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quote.tool.QuoteService.QuoteStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quote.tool.QuoteService.QuoteStreamResponse}
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quote.tool.QuoteService.Quote;
      reader.readMessage(value,proto.quote.tool.QuoteService.Quote.deserializeBinaryFromReader);
      msg.setQuote(value);
      break;
    case 2:
      var value = /** @type {!proto.quote.tool.QuoteService.QuoteStreamResponse.ChangeType} */ (reader.readEnum());
      msg.setChangetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quote.tool.QuoteService.QuoteStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quote.tool.QuoteService.QuoteStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quote.tool.QuoteService.Quote.serializeBinaryToWriter
    );
  }
  f = message.getChangetype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.ChangeType = {
  ADDED: 0,
  UPDATED: 1,
  DELETED: 2
};

/**
 * optional Quote quote = 1;
 * @return {?proto.quote.tool.QuoteService.Quote}
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.prototype.getQuote = function() {
  return /** @type{?proto.quote.tool.QuoteService.Quote} */ (
    jspb.Message.getWrapperField(this, proto.quote.tool.QuoteService.Quote, 1));
};


/**
 * @param {?proto.quote.tool.QuoteService.Quote|undefined} value
 * @return {!proto.quote.tool.QuoteService.QuoteStreamResponse} returns this
*/
proto.quote.tool.QuoteService.QuoteStreamResponse.prototype.setQuote = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quote.tool.QuoteService.QuoteStreamResponse} returns this
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.prototype.clearQuote = function() {
  return this.setQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.prototype.hasQuote = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChangeType changeType = 2;
 * @return {!proto.quote.tool.QuoteService.QuoteStreamResponse.ChangeType}
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.prototype.getChangetype = function() {
  return /** @type {!proto.quote.tool.QuoteService.QuoteStreamResponse.ChangeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.quote.tool.QuoteService.QuoteStreamResponse.ChangeType} value
 * @return {!proto.quote.tool.QuoteService.QuoteStreamResponse} returns this
 */
proto.quote.tool.QuoteService.QuoteStreamResponse.prototype.setChangetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


goog.object.extend(exports, proto.quote.tool);
