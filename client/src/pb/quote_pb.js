// source: quote.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.quoteTool.QuoteService', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.Cargo', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.CustomerContact', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.NoParams', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.Quote', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.QuoteCreateResponse', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.QuoteDeleteResponse', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.QuoteRequest', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.QuoteResponse', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.QuoteStreamResponse', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.QuoteStreamResponse.ChangeType', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.QuoteUpdateResponse', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.QuotesListResponse', null, global);
goog.exportSymbol('proto.quoteTool.QuoteService.Rate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.displayName = 'proto.quoteTool.QuoteService';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.Quote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quoteTool.QuoteService.Quote.repeatedFields_, null);
};
goog.inherits(proto.quoteTool.QuoteService.Quote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.Quote.displayName = 'proto.quoteTool.QuoteService.Quote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.CustomerContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.CustomerContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.CustomerContact.displayName = 'proto.quoteTool.QuoteService.CustomerContact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.Cargo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.Cargo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.Cargo.displayName = 'proto.quoteTool.QuoteService.Cargo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.Rate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.Rate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.Rate.displayName = 'proto.quoteTool.QuoteService.Rate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.NoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.NoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.NoParams.displayName = 'proto.quoteTool.QuoteService.NoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.QuoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.QuoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.QuoteRequest.displayName = 'proto.quoteTool.QuoteService.QuoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.QuoteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.QuoteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.QuoteResponse.displayName = 'proto.quoteTool.QuoteService.QuoteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.QuoteCreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.QuoteCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.QuoteCreateResponse.displayName = 'proto.quoteTool.QuoteService.QuoteCreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.QuoteUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.QuoteUpdateResponse.displayName = 'proto.quoteTool.QuoteService.QuoteUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.QuoteDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.QuoteDeleteResponse.displayName = 'proto.quoteTool.QuoteService.QuoteDeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.QuotesListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quoteTool.QuoteService.QuotesListResponse.repeatedFields_, null);
};
goog.inherits(proto.quoteTool.QuoteService.QuotesListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.QuotesListResponse.displayName = 'proto.quoteTool.QuoteService.QuotesListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quoteTool.QuoteService.QuoteStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.quoteTool.QuoteService.QuoteStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quoteTool.QuoteService.QuoteStreamResponse.displayName = 'proto.quoteTool.QuoteService.QuoteStreamResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService}
 */
proto.quoteTool.QuoteService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService;
  return proto.quoteTool.QuoteService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService}
 */
proto.quoteTool.QuoteService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quoteTool.QuoteService.Quote.repeatedFields_ = [5,19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.Quote.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.Quote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.Quote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.Quote.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    carrier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    customerRef: jspb.Message.getFieldWithDefault(msg, 4, ""),
    customerContactList: jspb.Message.toObjectList(msg.getCustomerContactList(),
    proto.quoteTool.QuoteService.CustomerContact.toObject, includeInstance),
    availabledate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    product: jspb.Message.getFieldWithDefault(msg, 7, ""),
    collectfrom: jspb.Message.getFieldWithDefault(msg, 8, ""),
    origin: jspb.Message.getFieldWithDefault(msg, 9, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 10, ""),
    cargotype: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdangerous: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    canbeturned: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    isknown: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    aircraftonly: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    description: jspb.Message.getFieldWithDefault(msg, 16, ""),
    sizemetric: jspb.Message.getFieldWithDefault(msg, 17, ""),
    weightmetric: jspb.Message.getFieldWithDefault(msg, 18, ""),
    cargoList: jspb.Message.toObjectList(msg.getCargoList(),
    proto.quoteTool.QuoteService.Cargo.toObject, includeInstance),
    rate: (f = msg.getRate()) && proto.quoteTool.QuoteService.Rate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.Quote}
 */
proto.quoteTool.QuoteService.Quote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.Quote;
  return proto.quoteTool.QuoteService.Quote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.Quote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.Quote}
 */
proto.quoteTool.QuoteService.Quote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarrier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerRef(value);
      break;
    case 5:
      var value = new proto.quoteTool.QuoteService.CustomerContact;
      reader.readMessage(value,proto.quoteTool.QuoteService.CustomerContact.deserializeBinaryFromReader);
      msg.addCustomerContact(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailabledate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProduct(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectfrom(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrigin(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCargotype(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdangerous(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanbeturned(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsknown(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAircraftonly(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setSizemetric(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightmetric(value);
      break;
    case 19:
      var value = new proto.quoteTool.QuoteService.Cargo;
      reader.readMessage(value,proto.quoteTool.QuoteService.Cargo.deserializeBinaryFromReader);
      msg.addCargo(value);
      break;
    case 20:
      var value = new proto.quoteTool.QuoteService.Rate;
      reader.readMessage(value,proto.quoteTool.QuoteService.Rate.deserializeBinaryFromReader);
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.Quote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.Quote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.Quote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.Quote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCarrier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCustomerRef();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCustomerContactList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.quoteTool.QuoteService.CustomerContact.serializeBinaryToWriter
    );
  }
  f = message.getAvailabledate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProduct();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCollectfrom();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOrigin();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCargotype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdangerous();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getCanbeturned();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIsknown();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getAircraftonly();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getSizemetric();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getWeightmetric();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getCargoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.quoteTool.QuoteService.Cargo.serializeBinaryToWriter
    );
  }
  f = message.getRate();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.quoteTool.QuoteService.Rate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string carrier = 2;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getCarrier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setCarrier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string customer = 3;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getCustomer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setCustomer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string customer_ref = 4;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getCustomerRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setCustomerRef = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated CustomerContact customer_contact = 5;
 * @return {!Array<!proto.quoteTool.QuoteService.CustomerContact>}
 */
proto.quoteTool.QuoteService.Quote.prototype.getCustomerContactList = function() {
  return /** @type{!Array<!proto.quoteTool.QuoteService.CustomerContact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quoteTool.QuoteService.CustomerContact, 5));
};


/**
 * @param {!Array<!proto.quoteTool.QuoteService.CustomerContact>} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
*/
proto.quoteTool.QuoteService.Quote.prototype.setCustomerContactList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.quoteTool.QuoteService.CustomerContact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quoteTool.QuoteService.CustomerContact}
 */
proto.quoteTool.QuoteService.Quote.prototype.addCustomerContact = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.quoteTool.QuoteService.CustomerContact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.clearCustomerContactList = function() {
  return this.setCustomerContactList([]);
};


/**
 * optional string availableDate = 6;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getAvailabledate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setAvailabledate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string product = 7;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getProduct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setProduct = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string collectFrom = 8;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getCollectfrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setCollectfrom = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string origin = 9;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setOrigin = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string destination = 10;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setDestination = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string cargoType = 11;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getCargotype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setCargotype = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool isDangerous = 12;
 * @return {boolean}
 */
proto.quoteTool.QuoteService.Quote.prototype.getIsdangerous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setIsdangerous = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool canBeTurned = 13;
 * @return {boolean}
 */
proto.quoteTool.QuoteService.Quote.prototype.getCanbeturned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setCanbeturned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool isKnown = 14;
 * @return {boolean}
 */
proto.quoteTool.QuoteService.Quote.prototype.getIsknown = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setIsknown = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool aircraftOnly = 15;
 * @return {boolean}
 */
proto.quoteTool.QuoteService.Quote.prototype.getAircraftonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setAircraftonly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string description = 16;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string sizeMetric = 17;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getSizemetric = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setSizemetric = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string weightMetric = 18;
 * @return {string}
 */
proto.quoteTool.QuoteService.Quote.prototype.getWeightmetric = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.setWeightmetric = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * repeated Cargo cargo = 19;
 * @return {!Array<!proto.quoteTool.QuoteService.Cargo>}
 */
proto.quoteTool.QuoteService.Quote.prototype.getCargoList = function() {
  return /** @type{!Array<!proto.quoteTool.QuoteService.Cargo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quoteTool.QuoteService.Cargo, 19));
};


/**
 * @param {!Array<!proto.quoteTool.QuoteService.Cargo>} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
*/
proto.quoteTool.QuoteService.Quote.prototype.setCargoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.quoteTool.QuoteService.Cargo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quoteTool.QuoteService.Cargo}
 */
proto.quoteTool.QuoteService.Quote.prototype.addCargo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.quoteTool.QuoteService.Cargo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.clearCargoList = function() {
  return this.setCargoList([]);
};


/**
 * optional Rate rate = 20;
 * @return {?proto.quoteTool.QuoteService.Rate}
 */
proto.quoteTool.QuoteService.Quote.prototype.getRate = function() {
  return /** @type{?proto.quoteTool.QuoteService.Rate} */ (
    jspb.Message.getWrapperField(this, proto.quoteTool.QuoteService.Rate, 20));
};


/**
 * @param {?proto.quoteTool.QuoteService.Rate|undefined} value
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
*/
proto.quoteTool.QuoteService.Quote.prototype.setRate = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quoteTool.QuoteService.Quote} returns this
 */
proto.quoteTool.QuoteService.Quote.prototype.clearRate = function() {
  return this.setRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quoteTool.QuoteService.Quote.prototype.hasRate = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.CustomerContact.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.CustomerContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.CustomerContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.CustomerContact.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.CustomerContact}
 */
proto.quoteTool.QuoteService.CustomerContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.CustomerContact;
  return proto.quoteTool.QuoteService.CustomerContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.CustomerContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.CustomerContact}
 */
proto.quoteTool.QuoteService.CustomerContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.CustomerContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.CustomerContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.CustomerContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.CustomerContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.quoteTool.QuoteService.CustomerContact.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.CustomerContact} returns this
 */
proto.quoteTool.QuoteService.CustomerContact.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string phone = 3;
 * @return {string}
 */
proto.quoteTool.QuoteService.CustomerContact.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.CustomerContact} returns this
 */
proto.quoteTool.QuoteService.CustomerContact.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.quoteTool.QuoteService.CustomerContact.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.CustomerContact} returns this
 */
proto.quoteTool.QuoteService.CustomerContact.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.Cargo.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.Cargo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.Cargo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.Cargo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pieces: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    width: jspb.Message.getFieldWithDefault(msg, 3, 0),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    grossweight: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.Cargo}
 */
proto.quoteTool.QuoteService.Cargo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.Cargo;
  return proto.quoteTool.QuoteService.Cargo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.Cargo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.Cargo}
 */
proto.quoteTool.QuoteService.Cargo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPieces(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGrossweight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.Cargo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.Cargo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.Cargo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.Cargo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPieces();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getClength();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getGrossweight();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int64 pieces = 1;
 * @return {number}
 */
proto.quoteTool.QuoteService.Cargo.prototype.getPieces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Cargo} returns this
 */
proto.quoteTool.QuoteService.Cargo.prototype.setPieces = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 cLength = 2;
 * @return {number}
 */
proto.quoteTool.QuoteService.Cargo.prototype.getClength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Cargo} returns this
 */
proto.quoteTool.QuoteService.Cargo.prototype.setClength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 width = 3;
 * @return {number}
 */
proto.quoteTool.QuoteService.Cargo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Cargo} returns this
 */
proto.quoteTool.QuoteService.Cargo.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 height = 4;
 * @return {number}
 */
proto.quoteTool.QuoteService.Cargo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Cargo} returns this
 */
proto.quoteTool.QuoteService.Cargo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 grossWeight = 5;
 * @return {number}
 */
proto.quoteTool.QuoteService.Cargo.prototype.getGrossweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Cargo} returns this
 */
proto.quoteTool.QuoteService.Cargo.prototype.setGrossweight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.Rate.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.Rate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.Rate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.Rate.toObject = function(includeInstance, msg) {
  var f, obj = {
    on: jspb.Message.getFieldWithDefault(msg, 1, ""),
    costmin: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    costrate: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    salesmin: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    salesrate: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.Rate}
 */
proto.quoteTool.QuoteService.Rate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.Rate;
  return proto.quoteTool.QuoteService.Rate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.Rate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.Rate}
 */
proto.quoteTool.QuoteService.Rate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCostmin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCostrate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSalesmin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSalesrate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.Rate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.Rate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.Rate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.Rate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCostmin();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getCostrate();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSalesmin();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getSalesrate();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string on = 1;
 * @return {string}
 */
proto.quoteTool.QuoteService.Rate.prototype.getOn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Rate} returns this
 */
proto.quoteTool.QuoteService.Rate.prototype.setOn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float costMin = 2;
 * @return {number}
 */
proto.quoteTool.QuoteService.Rate.prototype.getCostmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Rate} returns this
 */
proto.quoteTool.QuoteService.Rate.prototype.setCostmin = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float costRate = 3;
 * @return {number}
 */
proto.quoteTool.QuoteService.Rate.prototype.getCostrate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Rate} returns this
 */
proto.quoteTool.QuoteService.Rate.prototype.setCostrate = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float salesMin = 4;
 * @return {number}
 */
proto.quoteTool.QuoteService.Rate.prototype.getSalesmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Rate} returns this
 */
proto.quoteTool.QuoteService.Rate.prototype.setSalesmin = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float salesRate = 5;
 * @return {number}
 */
proto.quoteTool.QuoteService.Rate.prototype.getSalesrate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.quoteTool.QuoteService.Rate} returns this
 */
proto.quoteTool.QuoteService.Rate.prototype.setSalesrate = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.quoteTool.QuoteService.Rate.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.Rate} returns this
 */
proto.quoteTool.QuoteService.Rate.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.NoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.NoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.NoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.NoParams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.NoParams}
 */
proto.quoteTool.QuoteService.NoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.NoParams;
  return proto.quoteTool.QuoteService.NoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.NoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.NoParams}
 */
proto.quoteTool.QuoteService.NoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.NoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.NoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.NoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.NoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.QuoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.QuoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.QuoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.QuoteRequest}
 */
proto.quoteTool.QuoteService.QuoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.QuoteRequest;
  return proto.quoteTool.QuoteService.QuoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.QuoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.QuoteRequest}
 */
proto.quoteTool.QuoteService.QuoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.QuoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.QuoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.QuoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.quoteTool.QuoteService.QuoteRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.QuoteRequest} returns this
 */
proto.quoteTool.QuoteService.QuoteRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.QuoteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.QuoteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.QuoteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quote: (f = msg.getQuote()) && proto.quoteTool.QuoteService.Quote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.QuoteResponse}
 */
proto.quoteTool.QuoteService.QuoteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.QuoteResponse;
  return proto.quoteTool.QuoteService.QuoteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.QuoteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.QuoteResponse}
 */
proto.quoteTool.QuoteService.QuoteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quoteTool.QuoteService.Quote;
      reader.readMessage(value,proto.quoteTool.QuoteService.Quote.deserializeBinaryFromReader);
      msg.setQuote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.QuoteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.QuoteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.QuoteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quoteTool.QuoteService.Quote.serializeBinaryToWriter
    );
  }
};


/**
 * optional Quote quote = 1;
 * @return {?proto.quoteTool.QuoteService.Quote}
 */
proto.quoteTool.QuoteService.QuoteResponse.prototype.getQuote = function() {
  return /** @type{?proto.quoteTool.QuoteService.Quote} */ (
    jspb.Message.getWrapperField(this, proto.quoteTool.QuoteService.Quote, 1));
};


/**
 * @param {?proto.quoteTool.QuoteService.Quote|undefined} value
 * @return {!proto.quoteTool.QuoteService.QuoteResponse} returns this
*/
proto.quoteTool.QuoteService.QuoteResponse.prototype.setQuote = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quoteTool.QuoteService.QuoteResponse} returns this
 */
proto.quoteTool.QuoteService.QuoteResponse.prototype.clearQuote = function() {
  return this.setQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quoteTool.QuoteService.QuoteResponse.prototype.hasQuote = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.QuoteCreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.QuoteCreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.QuoteCreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteCreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.QuoteCreateResponse}
 */
proto.quoteTool.QuoteService.QuoteCreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.QuoteCreateResponse;
  return proto.quoteTool.QuoteService.QuoteCreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.QuoteCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.QuoteCreateResponse}
 */
proto.quoteTool.QuoteService.QuoteCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.QuoteCreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.QuoteCreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.QuoteCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteCreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.quoteTool.QuoteService.QuoteCreateResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.QuoteCreateResponse} returns this
 */
proto.quoteTool.QuoteService.QuoteCreateResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.QuoteUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.QuoteUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.QuoteUpdateResponse}
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.QuoteUpdateResponse;
  return proto.quoteTool.QuoteService.QuoteUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.QuoteUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.QuoteUpdateResponse}
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.QuoteUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.QuoteUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.QuoteUpdateResponse} returns this
 */
proto.quoteTool.QuoteService.QuoteUpdateResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.QuoteDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.QuoteDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.QuoteDeleteResponse}
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.QuoteDeleteResponse;
  return proto.quoteTool.QuoteService.QuoteDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.QuoteDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.QuoteDeleteResponse}
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.QuoteDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.QuoteDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quoteTool.QuoteService.QuoteDeleteResponse} returns this
 */
proto.quoteTool.QuoteService.QuoteDeleteResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quoteTool.QuoteService.QuotesListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.QuotesListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.QuotesListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.QuotesListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuotesListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quotesList: jspb.Message.toObjectList(msg.getQuotesList(),
    proto.quoteTool.QuoteService.Quote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.QuotesListResponse}
 */
proto.quoteTool.QuoteService.QuotesListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.QuotesListResponse;
  return proto.quoteTool.QuoteService.QuotesListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.QuotesListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.QuotesListResponse}
 */
proto.quoteTool.QuoteService.QuotesListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quoteTool.QuoteService.Quote;
      reader.readMessage(value,proto.quoteTool.QuoteService.Quote.deserializeBinaryFromReader);
      msg.addQuotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.QuotesListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.QuotesListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.QuotesListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuotesListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.quoteTool.QuoteService.Quote.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Quote quotes = 1;
 * @return {!Array<!proto.quoteTool.QuoteService.Quote>}
 */
proto.quoteTool.QuoteService.QuotesListResponse.prototype.getQuotesList = function() {
  return /** @type{!Array<!proto.quoteTool.QuoteService.Quote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quoteTool.QuoteService.Quote, 1));
};


/**
 * @param {!Array<!proto.quoteTool.QuoteService.Quote>} value
 * @return {!proto.quoteTool.QuoteService.QuotesListResponse} returns this
*/
proto.quoteTool.QuoteService.QuotesListResponse.prototype.setQuotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.quoteTool.QuoteService.Quote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quoteTool.QuoteService.Quote}
 */
proto.quoteTool.QuoteService.QuotesListResponse.prototype.addQuotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.quoteTool.QuoteService.Quote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quoteTool.QuoteService.QuotesListResponse} returns this
 */
proto.quoteTool.QuoteService.QuotesListResponse.prototype.clearQuotesList = function() {
  return this.setQuotesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.quoteTool.QuoteService.QuoteStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quoteTool.QuoteService.QuoteStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quote: (f = msg.getQuote()) && proto.quoteTool.QuoteService.Quote.toObject(includeInstance, f),
    changetype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quoteTool.QuoteService.QuoteStreamResponse}
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quoteTool.QuoteService.QuoteStreamResponse;
  return proto.quoteTool.QuoteService.QuoteStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quoteTool.QuoteService.QuoteStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quoteTool.QuoteService.QuoteStreamResponse}
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.quoteTool.QuoteService.Quote;
      reader.readMessage(value,proto.quoteTool.QuoteService.Quote.deserializeBinaryFromReader);
      msg.setQuote(value);
      break;
    case 2:
      var value = /** @type {!proto.quoteTool.QuoteService.QuoteStreamResponse.ChangeType} */ (reader.readEnum());
      msg.setChangetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quoteTool.QuoteService.QuoteStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quoteTool.QuoteService.QuoteStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.quoteTool.QuoteService.Quote.serializeBinaryToWriter
    );
  }
  f = message.getChangetype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.ChangeType = {
  ADDED: 0,
  UPDATED: 1,
  DELETED: 2
};

/**
 * optional Quote quote = 1;
 * @return {?proto.quoteTool.QuoteService.Quote}
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.prototype.getQuote = function() {
  return /** @type{?proto.quoteTool.QuoteService.Quote} */ (
    jspb.Message.getWrapperField(this, proto.quoteTool.QuoteService.Quote, 1));
};


/**
 * @param {?proto.quoteTool.QuoteService.Quote|undefined} value
 * @return {!proto.quoteTool.QuoteService.QuoteStreamResponse} returns this
*/
proto.quoteTool.QuoteService.QuoteStreamResponse.prototype.setQuote = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quoteTool.QuoteService.QuoteStreamResponse} returns this
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.prototype.clearQuote = function() {
  return this.setQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.prototype.hasQuote = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChangeType changeType = 2;
 * @return {!proto.quoteTool.QuoteService.QuoteStreamResponse.ChangeType}
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.prototype.getChangetype = function() {
  return /** @type {!proto.quoteTool.QuoteService.QuoteStreamResponse.ChangeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.quoteTool.QuoteService.QuoteStreamResponse.ChangeType} value
 * @return {!proto.quoteTool.QuoteService.QuoteStreamResponse} returns this
 */
proto.quoteTool.QuoteService.QuoteStreamResponse.prototype.setChangetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


goog.object.extend(exports, proto.quoteTool);
